Scenario: monitor outside thermometer temperature
Given: outside thermometer @therm
Run: once a second

scenario:
    Read temperature from @therm, result: @reading(@time, @temp, @therm)
    If @temp < -10C Then
        register @reading
        log problem @reading
        raise alarm "Outside temperature lower than bound"
    Else If @temp > 50C Then
        register @reading
        log problem @reading
        raise alarm "Outside temperature higher than bound"
    Else register @reading

register (@time, @tempCelsius, @device):
    @tempCelsius + 273.15, result: @tempKelvin
    Store in database (@time, @tempKelvin, @device)
    
Read thermometers - temperature
Read pressure sensors - pressure
Read clock - timings
Read accelerometer - g-force
Store value into database (sensors measurements, calculations, device parameters, logs)
Get archive value from database (sensor measurements, calculations, device parameters, logs)
Send command to device (start, stop, open, close, turn on, turn off, etc.)
Get actual parameters of device (status, faults, state)
Log event (can be storing value into database)
Raise alarm with message (can be sending command to alarm device)
Make calculations with values


Scenario: monitor outside thermometer temperature
Given: outside thermometer @therm

// Stream of results of the thermometer
stream therm_monitor <for @reading in therm_readings>:
    Store in database @reading
    run script validate_temperature(@reading), result: @result
    If @result == (Failure, @message) Then
        log problem @reading
        raise alarm @message
    return @result

// Stream of measurements of the thermometer
stream therm_readings <once a second>:
    run script therm_temperature(), result: @reading
    return @reading

// Script that reads value from the thermometer
script therm_temperature:
    Read temperature from @therm, result: @reading(@time, @tempCelsius, @therm)
    @tempCelsius + 273.15, result: @tempKelvin
    return (@time, @tempKelvin, @therm)
    
// Script that validates temperature
script validate_temperature (@time, @temp, @therm):
    If @temp < 263.15K Then
        return (Failure, "Outside temperature lower than bound for " + @therm)
    Else If @temp > 323.15K Then
        return (Failure, "Outside temperature higher than bound for " + @therm)
    Else return Success




Scenario: monitor outside thermometer temperature
Given: outside thermometer @therm
Evaluation: run arrow therm_monitorA(@therm)

arrow therm_monitorA [In: @therm, Out: ()]
    @therm          >---- periodicA (seconds 1) ----> (@time, @therm)
    (@time, @therm) >---- therm_temperatureA    ----> @reading
    @reading        >---- process_temperatureA  ----> ()
    return ()

arrow therm_temperatureA [In: (@time, @therm), Out: @reading]
    therm_temperatureS(@therm) >---- run_scriptA ----> @temp
    return @reading(@time, @temp, @therm)

arrow process_temperatureA [In: @reading,  Out: ()]
    @reading            >---- store_in_databaseA    ----> ()
    @reading            >---- validate_temperatureA ----> @result
    (@reading, @result) >---- analyze_failuresA     ----> ()
    return ()
    
arrow store_in_databaseA [In: @reading, Out: ()]:
    store_in_databaseS(@reading) >---- run_scriptA ----> ()
    return ()

arrow validate_temperatureA [In: @reading, Out: @result]
    validate_temperatureS(@reading) >---- run_scriptA ----> @result
    return @result

arrow analyze_failuresA [In: @value, Out: ()]
    analyze_failuresS(@value) >---- run_scriptA ----> ()
    return ()

script store_in_databaseS (@reading):
    <some script goes here>
    
script validate_temperatureS (@reading):
    <some script goes here>

script analyze_failuresS (@value):
    <some script goes here>

    
    
    
    
    
    ???

    



Requirements:
1. Script aborting.
2. Fail-scenario.
3. Async scripts call.
4. Scripts can return values.
5. Math calculations.
6. External devices for calculations (FPGA).
7. External DSL.
8. Posting values to graph.
9. Reading actual data from sensors.
10. Access to archive data for sensors and devices.
11. Scheme of network that can be run.
12. Different data sources.
13. Embedded DSL that can be translated to external DSL.

